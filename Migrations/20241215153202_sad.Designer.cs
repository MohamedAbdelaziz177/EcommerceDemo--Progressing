// <auto-generated />
using System;
using E_Commerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241215153202_sad")]
    partial class sad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Name = "Nike"
                        },
                        new
                        {
                            BrandId = 2,
                            Name = "Adidas"
                        },
                        new
                        {
                            BrandId = 3,
                            Name = "Puma"
                        },
                        new
                        {
                            BrandId = 4,
                            Name = "Reebok"
                        },
                        new
                        {
                            BrandId = 5,
                            Name = "Under Armour"
                        },
                        new
                        {
                            BrandId = 6,
                            Name = "Asics"
                        },
                        new
                        {
                            BrandId = 7,
                            Name = "New Balance"
                        },
                        new
                        {
                            BrandId = 8,
                            Name = "Skechers"
                        },
                        new
                        {
                            BrandId = 9,
                            Name = "Converse"
                        },
                        new
                        {
                            BrandId = 10,
                            Name = "Vans"
                        },
                        new
                        {
                            BrandId = 11,
                            Name = "Fila"
                        },
                        new
                        {
                            BrandId = 12,
                            Name = "Columbia"
                        },
                        new
                        {
                            BrandId = 13,
                            Name = "The North Face"
                        },
                        new
                        {
                            BrandId = 14,
                            Name = "Timberland"
                        },
                        new
                        {
                            BrandId = 15,
                            Name = "Hoka One One"
                        },
                        new
                        {
                            BrandId = 16,
                            Name = "Brooks"
                        },
                        new
                        {
                            BrandId = 17,
                            Name = "Champion"
                        },
                        new
                        {
                            BrandId = 18,
                            Name = "Lululemon"
                        },
                        new
                        {
                            BrandId = 19,
                            Name = "Arc'teryx"
                        },
                        new
                        {
                            BrandId = 20,
                            Name = "Patagonia"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("E_Commerce.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Devices, gadgets, and technology products",
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Clothing, footwear, and accessories",
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Furniture, appliances, and kitchenware",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Sports equipment and outdoor gear",
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Skincare, haircare, and wellness products",
                            Name = "Health & Beauty"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Fiction, non-fiction, and educational books",
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Toys, board games, and puzzles",
                            Name = "Toys & Games"
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Car accessories and maintenance products",
                            Name = "Automotive"
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Food, beverages, and household supplies",
                            Name = "Groceries"
                        },
                        new
                        {
                            CategoryId = 10,
                            Description = "Rings, necklaces, and wristwatches",
                            Name = "Jewelry & Watches"
                        },
                        new
                        {
                            CategoryId = 11,
                            Description = "Items for babies and toddlers",
                            Name = "Baby Products"
                        },
                        new
                        {
                            CategoryId = 12,
                            Description = "Products for pet care and grooming",
                            Name = "Pet Supplies"
                        },
                        new
                        {
                            CategoryId = 13,
                            Description = "Stationery and office equipment",
                            Name = "Office Supplies"
                        },
                        new
                        {
                            CategoryId = 14,
                            Description = "Video games, consoles, and accessories",
                            Name = "Gaming"
                        },
                        new
                        {
                            CategoryId = 15,
                            Description = "Guitars, keyboards, and other instruments",
                            Name = "Music Instruments"
                        },
                        new
                        {
                            CategoryId = 16,
                            Description = "Gym equipment and fitness gear",
                            Name = "Health & Fitness"
                        },
                        new
                        {
                            CategoryId = 17,
                            Description = "Art supplies and crafting materials",
                            Name = "Arts & Crafts"
                        },
                        new
                        {
                            CategoryId = 18,
                            Description = "Luggage and travel accessories",
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 19,
                            Description = "Gardening tools and outdoor equipment",
                            Name = "Garden & Tools"
                        },
                        new
                        {
                            CategoryId = 20,
                            Description = "Memorabilia and rare items for collectors",
                            Name = "Collectibles"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Favorite", b =>
                {
                    b.Property<int>("FavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("FavId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("E_Commerce.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("E_Commerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ImageUrl = "",
                            Name = "HP Zbook Power G9",
                            Price = 19.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            ImageUrl = "Imgs/p7",
                            Name = "HP Zbook Power G9 ",
                            Price = 29.99m,
                            StockQuantity = 30
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 3,
                            CategoryId = 3,
                            ImageUrl = "Imgs/p6",
                            Name = "HP Zbook Power G9",
                            Price = 39.99m,
                            StockQuantity = 20
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 4,
                            CategoryId = 4,
                            ImageUrl = "Imgs/p5",
                            Name = "HP Zbook Power G9",
                            Price = 49.99m,
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 5,
                            CategoryId = 5,
                            ImageUrl = "Imgs/p4",
                            Name = "HP Zbook Power G9",
                            Price = 59.99m,
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = 6,
                            BrandId = 6,
                            CategoryId = 6,
                            ImageUrl = "Imgs/p3",
                            Name = "HP Zbook Power G9",
                            Price = 69.99m,
                            StockQuantity = 25
                        },
                        new
                        {
                            ProductId = 7,
                            BrandId = 7,
                            CategoryId = 7,
                            ImageUrl = "Imgs/p2",
                            Name = "HP Zbook Power G9",
                            Price = 79.99m,
                            StockQuantity = 35
                        },
                        new
                        {
                            ProductId = 8,
                            BrandId = 8,
                            CategoryId = 8,
                            ImageUrl = "Imgs/p3",
                            Name = "HP Zbook Power G9",
                            Price = 89.99m,
                            StockQuantity = 15
                        },
                        new
                        {
                            ProductId = 9,
                            BrandId = 9,
                            CategoryId = 9,
                            ImageUrl = "Imgs/p4",
                            Name = "HP Zbook Power G9",
                            Price = 99.99m,
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 10,
                            BrandId = 10,
                            CategoryId = 10,
                            ImageUrl = "Imgs/p5",
                            Name = "HP Zbook Power G9",
                            Price = 109.99m,
                            StockQuantity = 5
                        },
                        new
                        {
                            ProductId = 11,
                            BrandId = 11,
                            CategoryId = 11,
                            ImageUrl = "Imgs/p10",
                            Name = "HP Zbook Power G9",
                            Price = 119.99m,
                            StockQuantity = 12
                        },
                        new
                        {
                            ProductId = 12,
                            BrandId = 12,
                            CategoryId = 12,
                            ImageUrl = "Imgs/p7",
                            Name = "HP Zbook Power G9",
                            Price = 129.99m,
                            StockQuantity = 18
                        },
                        new
                        {
                            ProductId = 13,
                            BrandId = 13,
                            CategoryId = 13,
                            ImageUrl = "Imgs/p9",
                            Name = "HP Zbook Power G9",
                            Price = 139.99m,
                            StockQuantity = 22
                        },
                        new
                        {
                            ProductId = 14,
                            BrandId = 14,
                            CategoryId = 14,
                            ImageUrl = "Imgs/p8",
                            Name = "HP Zbook Power G9",
                            Price = 149.99m,
                            StockQuantity = 8
                        },
                        new
                        {
                            ProductId = 15,
                            BrandId = 15,
                            CategoryId = 15,
                            ImageUrl = "Imgs/p10",
                            Name = "HP Zbook Power G9",
                            Price = 159.99m,
                            StockQuantity = 6
                        });
                });

            modelBuilder.Entity("E_Commerce.ViewModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("E_Commerce.ViewModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Models.Cart", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", "Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Favorite", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Order", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.Models.OrderItem", b =>
                {
                    b.HasOne("E_Commerce.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Payment", b =>
                {
                    b.HasOne("E_Commerce.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("E_Commerce.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_Commerce.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.Models.Brand", "brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("E_Commerce.ViewModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.ViewModels.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
